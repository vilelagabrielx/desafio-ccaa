import { HttpInterceptorFn } from '@angular/common/http';
import { inject } from '@angular/core';
import { AuthService } from './auth.service';
import { environment } from '../../environments/environment';

export const AuthInterceptor: HttpInterceptorFn = (request, next) => {
  const authService = inject(AuthService);

  // Se a requisi√ß√£o n√£o for para a API, n√£o adiciona o token
  if (!shouldAddToken(request)) {
    return next(request);
  }

  // Obt√©m o token JWT local
  const token = authService.getToken();
  
  if (token) {
    console.log('üîê AuthInterceptor: Adicionando token √† requisi√ß√£o:', request.url);
    console.log('üîê AuthInterceptor: Token (primeiros 20 chars):', token.substring(0, 20) + '...');
    
    // Adiciona o token de autoriza√ß√£o no header
    const authReq = request.clone({
      setHeaders: {
        Authorization: `Bearer ${token}`
      }
    });
    
    console.log('üîê AuthInterceptor: Headers da requisi√ß√£o:', authReq.headers);
    return next(authReq);
  } else {
    console.log('‚ö†Ô∏è AuthInterceptor: Sem token para requisi√ß√£o:', request.url);
  }
  
  // Se n√£o h√° token, continua sem autoriza√ß√£o
  return next(request);
};

/**
 * Verifica se deve adicionar o token na requisi√ß√£o
 */
function shouldAddToken(request: any): boolean {
  // Adiciona token apenas para requisi√ß√µes da API
  const apiUrl = environment.api.baseUrl;
  
  // Se a URL da requisi√ß√£o come√ßar com a URL da API, adiciona o token
  if (request.url.startsWith(apiUrl)) {
    return true;
  }
  
  // Se for uma requisi√ß√£o relativa (para o mesmo dom√≠nio), adiciona o token
  if (request.url.startsWith('/api/')) {
    return true;
  }
  
  return false;
}
