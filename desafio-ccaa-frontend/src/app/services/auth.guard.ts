import { Injectable } from '@angular/core';
import { CanActivate, Router, UrlTree } from '@angular/router';
import { Observable, of } from 'rxjs';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  canActivate(): Observable<boolean | UrlTree> {
    console.log('üîí AuthGuard: Verificando acesso √† rota...');
    
    // Verificar autentica√ß√£o
    const isAuthenticated = this.authService.isAuthenticated();
    console.log('üîí AuthGuard: Resultado da verifica√ß√£o:', isAuthenticated);
    console.log('üîí AuthGuard: Token presente:', !!this.authService.getToken());
    console.log('üîí AuthGuard: Usu√°rio presente:', !!this.authService.getCurrentUser());
    
    if (isAuthenticated) {
      // Verificar se o token ainda √© v√°lido
      const token = this.authService.getToken();
      if (token && this.authService.validateToken(token)) {
        console.log('‚úÖ AuthGuard: Token v√°lido, acesso permitido');
        return of(true);
      } else {
        console.log('‚ö†Ô∏è AuthGuard: Token inv√°lido ou expirado, fazendo logout');
        this.authService.logout();
        return of(this.router.createUrlTree(['/login']));
      }
    }
    
    console.log('‚ùå AuthGuard: Acesso negado, redirecionando para login');
    // Usar createUrlTree para evitar problemas de navega√ß√£o
    return of(this.router.createUrlTree(['/login']));
  }
}

/**
 * Guarda para rotas que requerem permiss√µes espec√≠ficas
 */
@Injectable({
  providedIn: 'root'
})
export class PermissionGuard implements CanActivate {
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  canActivate(route: any): Observable<boolean | UrlTree> {
    const requiredPermission = route.data?.['permission'];
    
    if (!requiredPermission) {
      const isAuthenticated = this.authService.isAuthenticated();
      return of(isAuthenticated);
    }

    // Para JWT local, por enquanto todos os usu√°rios autenticados t√™m todas as permiss√µes
    // Em uma implementa√ß√£o mais avan√ßada, voc√™ poderia verificar roles/permiss√µes no token JWT
    const isAuthenticated = this.authService.isAuthenticated();
    
    if (isAuthenticated) {
      return of(true);
    }
    
    // Se n√£o tiver permiss√£o, redireciona para p√°gina de acesso negado
    this.router.navigate(['/access-denied']);
    return of(false);
  }
}

/**
 * Guarda para rotas que devem ser acess√≠veis apenas por usu√°rios N√ÉO autenticados
 * (ex: login, register, reset-password)
 */
@Injectable({
  providedIn: 'root'
})
export class GuestGuard implements CanActivate {
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  canActivate(): Observable<boolean | UrlTree> {
    console.log('üö´ GuestGuard: Verificando se usu√°rio est√° deslogado...');
    
    const isAuthenticated = this.authService.isAuthenticated();
    console.log('üö´ GuestGuard: Usu√°rio autenticado:', isAuthenticated);
    
    if (!isAuthenticated) {
      console.log('‚úÖ GuestGuard: Usu√°rio n√£o autenticado, acesso permitido');
      return of(true);
    }
    
    console.log('‚ùå GuestGuard: Usu√°rio j√° autenticado, redirecionando para books');
    // Usu√°rio j√° est√° logado, redireciona para a p√°gina principal
    return of(this.router.createUrlTree(['/books']));
  }
}