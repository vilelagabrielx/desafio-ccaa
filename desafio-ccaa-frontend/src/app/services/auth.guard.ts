import { Injectable } from '@angular/core';
import { CanActivate, Router, UrlTree } from '@angular/router';
import { Observable, of } from 'rxjs';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  canActivate(): Observable<boolean | UrlTree> {
    console.log('üîí AuthGuard: Verificando acesso √† rota...');
    
    const isAuthenticated = this.authService.isAuthenticated();
    console.log('üîí AuthGuard: Resultado da verifica√ß√£o:', isAuthenticated);
    
    if (isAuthenticated) {
      console.log('‚úÖ AuthGuard: Acesso permitido');
      return of(true);
    }
    
    console.log('‚ùå AuthGuard: Acesso negado, redirecionando para login');
    this.router.navigate(['/login']);
    return of(false);
  }
}

/**
 * Guarda para rotas que requerem permiss√µes espec√≠ficas
 */
@Injectable({
  providedIn: 'root'
})
export class PermissionGuard implements CanActivate {
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  canActivate(route: any): Observable<boolean | UrlTree> {
    const requiredPermission = route.data?.['permission'];
    
    if (!requiredPermission) {
      const isAuthenticated = this.authService.isAuthenticated();
      return of(isAuthenticated);
    }

    // Para JWT local, por enquanto todos os usu√°rios autenticados t√™m todas as permiss√µes
    // Em uma implementa√ß√£o mais avan√ßada, voc√™ poderia verificar roles/permiss√µes no token JWT
    const isAuthenticated = this.authService.isAuthenticated();
    
    if (isAuthenticated) {
      return of(true);
    }
    
    // Se n√£o tiver permiss√£o, redireciona para p√°gina de acesso negado
    this.router.navigate(['/access-denied']);
    return of(false);
  }
}
